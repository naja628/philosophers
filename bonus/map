use several sems:
	* 1 is number of forks: make be number of pairs !
	* 1 sem starts being nphilo decrements when enough meals, when 0, finish

maybe use a bi-semaphore thingy, where 

to finish the similution, have a semaphore be whether we are done, 
when a philo dies he posts to it, main waits for it to kill everyone.
All operations should check wether we are done before executing.

naive implementation: just pairs of forks and death, generic
all operations wrap wait/post around generic, same for death-checking 
BUT don't post after

for times eaten maybe have 2 sems, 1 increments the other decr
death increments times_eaten by nphilo, consumes generic,
main waits for nsatiated nphilo times, then kills everyone.

extremely ugly, better, have a seperate process that waits on nsatiated, 
this process causes death if enough have eaten
